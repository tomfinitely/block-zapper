<?xml version="1.0" encoding="UTF-8"?>
<artefact xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="artefact.xsd" name="Block Zapper" slug="block-zapper" type="code-package" schemaVersion="2">
  <file path="readme.txt">
    <description>This file contains the readme information for the block. It is used to provide information about the block, its usage, and any other relevant details.</description>
    <content><![CDATA[=== Block Zapper ===

Contributors:      WordPress Telex
Tags:              block, container, group, cleanup, selective
Tested up to:      6.8
Stable tag:        0.2.0
License:           GPLv2 or later
License URI:       https://www.gnu.org/licenses/gpl-2.0.html
A powerful container block with granular control to selectively remove custom properties from child blocks.

== Description ==

Block Zapper is a container block similar to the WordPress Group block, but with selective superpowers: the ability to remove specific types of custom properties from child blocks contained within it using granular checkbox controls.

This block is perfect for:

* Creating clean sections on your website with precise control
* Grouping related content blocks together
* Selectively resetting specific customizations while keeping others
* Managing complex layouts with fine-tuned cleanup options
* Preserving important content like media while removing styling

The selective "ZAP!" functionality in the block inspector allows you to choose exactly what to remove from any blocks placed inside the Block Zapper container.

== Key Features ==

* **Two Zap Modes**: 
  * ⚡ **Selective Zap**: Choose exactly what to remove with 7 granular categories
  * 💥 **Mega Zap**: Nuclear option that removes ALL styling while preserving content
  
* **Granular Control Categories**:
  * ⚙️ Block settings (layout, alignment, etc.)
  * 🎨 Block styles (colors, gradients, backgrounds) 
  * 🔧 Custom properties (fonts, spacing, borders, effects)
  * 📸 Keep images and videos (recommended for both modes)
  * 📝 Custom classes (Additional CSS class(es))
  * ⚓ Custom anchors (HTML anchor)
  * 🏷️ HTML element selections (alignment, tags)

* **Smart Preservation**: Essential content like text, images, and URLs are always preserved
* **Media Protection**: Robust option to keep all media-related attributes intact in both modes
* **Visual Feedback**: Clear status display showing blocks and properties count
* **Undo Support**: All changes can be undone with standard WordPress undo
* **Real-time Updates**: See changes immediately in the editor

== Installation ==

1. Upload the plugin files to the `/wp-content/plugins/block-zapper` directory, or install the plugin through the WordPress plugins screen directly.
2. Activate the plugin through the 'Plugins' screen in WordPress
3. The Block Zapper block will be available in the block inserter under the "Design" category

== Usage ==

1. Add a Block Zapper block to your post or page
2. Insert any blocks you want inside the Block Zapper container
3. Customize the child blocks as needed (colors, spacing, fonts, etc.)
4. Select the Block Zapper block to see the inspector controls
5. Choose your zap mode:
   - **Selective Zap**: Check specific categories you want to remove
   - **Mega Zap**: Nuclear option for complete styling cleanup
6. Make sure "Keep images and videos" is checked (recommended for both modes)
7. Click the appropriate ZAP button to apply your choices
8. All matching properties will be removed from child blocks instantly

== Granular Zapping Categories ==

**⚙️ Block Settings**: Removes core block functionality like layout, vertical alignment, and template settings.

**🎨 Block Styles**: Removes visual styling including background colors, text colors, gradients, and overlay colors.

**🔧 Custom Properties**: Removes typography (fonts, sizes, weights), spacing (margin, padding), borders, shadows, effects, dimensions, and positioning.

**📸 Keep Media**: When checked, preserves all media-related attributes like image sources, video settings, and media controls in both selective and mega zap modes.

**📝 Custom Classes**: Removes the "Additional CSS class(es)" field content from the Advanced panel.

**⚓ Custom Anchors**: Removes the "HTML anchor" field content from the Advanced panel.

**🏷️ HTML Element Selections**: Removes alignment settings and HTML element tag choices.

== Frequently Asked Questions ==

= Does the zap button delete my content? =

No! The zap functionality only removes the specific types of properties you select. Your actual text content, images, links, and core block structure remain completely intact. Essential content attributes are always preserved regardless of your selections.

= Can I undo the zap action? =

Yes, you can use the standard WordPress undo functionality (Ctrl+Z or Cmd+Z) to restore the properties if you zap them by mistake.

= What's the difference between Selective Zap and Mega Zap? =

Selective Zap lets you choose specific categories to remove with granular control. Mega Zap is the nuclear option that removes ALL styling properties while keeping only essential content and media (if selected).

= Why should I keep "Keep images and videos" checked? =

This option preserves important media attributes like image sources, alt text, video controls, and accessibility features. Unchecking it could remove these essential media properties and break your media blocks.

= Does "Keep images and videos" work in Mega Zap mode? =

Yes! As of version 0.2.0, the media preservation feature works correctly in both Selective Zap and Mega Zap modes.

= Can I zap blocks multiple times with different settings? =

Yes! You can run multiple zap operations with different checkbox combinations and modes. The block remembers your last settings for convenience.

= Will this affect blocks outside the Block Zapper? =

No, the zap action only affects blocks that are direct children of the Block Zapper container. Other blocks on your page remain untouched.

== Screenshots ==

1. Block Zapper in the block inserter with database-remove icon
2. Container with child blocks showing various custom styling applied
3. Inspector controls showing selective zap mode with granular options
4. Inspector controls showing mega zap mode with media preservation
5. Status display showing block count and properties before zapping
6. Success message after zapping with detailed results
7. Clean blocks with only selected properties removed

== Changelog ==

= 0.2.0 =
* FIXED: "Keep images and videos" now works correctly in Mega Zap mode
* Enhanced media preservation logic with absolute priority
* Improved debugging and console logging
* Better error handling and validation
* Updated documentation with new features and fixes

= 0.1.0 =
* Initial release with granular zapping controls
* Seven selective zap categories with checkboxes
* Container functionality with inner blocks support
* Smart media preservation options
* Real-time status display and feedback
* Integration with WordPress block editor
* Comprehensive error handling and validation

== Advanced Usage Tips ==

* Use Selective Zap when you want precise control over what gets removed
* Use Mega Zap when you want to completely reset all styling back to defaults
* Always keep "Keep images and videos" checked unless you specifically want to reset media attributes
* The status display shows total properties to help you understand what's being modified
* Check the browser console for detailed debugging information about what was zapped
* Use "Block styles" alone to remove only colors while keeping spacing
* Combine "Custom classes" and "Custom anchors" to clean up Advanced panel settings

== Support ==

For support and feature requests, please contact WordPress Telex. Check the browser console for detailed debugging information if needed.]]></content>
  </file>
  <file path="block-zapper.php">
    <description>This file contains the block registration code in the form of a single block plugin. Any other plugin related functionality should be added to this file. All block rendering functionality should go to the `render.php` file.</description>
    <content><![CDATA[<?php
/**
 * Plugin Name:       Block Zapper
 * Description:       A container block that allows you to group other blocks and reset their custom properties with granular control.
 * Version:           0.2.0
 * Requires at least: 6.0
 * Requires PHP:      7.4
 * Author:            WordPress Telex
 * License:           GPLv2 or later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       block-zapper-block-wp
 *
 * @package BlockZapper
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

/**
 * Registers the block using the metadata loaded from the `block.json` file.
 * Behind the scenes, it registers also all assets so they can be enqueued
 * through the block editor in the corresponding context.
 *
 * @see https://developer.wordpress.org/reference/functions/register_block_type/
 */
function telex_block_zapper_block_init() {
	register_block_type( __DIR__ . '/build/' );
}
add_action( 'init', 'telex_block_zapper_block_init' );]]></content>
  </file>
  <file path="src/block.json">
    <description>This file contains metadata about the block including its name, title, category, icon, and other properties. The icon is a WordPress Dashicon name (e.g., "admin-post", "format-aside", "admin-page"). Do not use any icon that's not in the list under any circustamce. These are the only slugs available:
	
	menu menu-alt menu-alt2 menu-alt3 admin-site admin-site-alt admin-site-alt2 admin-site-alt3 dashboard admin-post admin-media admin-links admin-page admin-comments admin-appearance admin-plugins plugins-checked admin-users admin-tools admin-settings admin-network admin-home admin-generic admin-collapse filter admin-customizer admin-multisite welcome-write-blog welcome-add-page welcome-view-site welcome-widgets-menus welcome-comments welcome-learn-more format-aside format-image format-gallery format-video format-status format-quote format-chat format-audio camera camera-alt images-alt images-alt2 video-alt video-alt2 video-alt3 media-archive media-audio media-code media-default media-document media-interactive media-spreadsheet media-text media-video playlist-audio playlist-video controls-play controls-pause controls-forward controls-skipforward controls-back controls-skipback controls-repeat controls-volumeon controls-volumeoff image-crop image-rotate image-rotate-left image-rotate-right image-flip-vertical image-flip-horizontal image-filter undo redo database-add database database-export database-import database-remove database-view align-full-width align-pull-left align-pull-right align-wide block-default button cloud-saved cloud-upload columns cover-image ellipsis embed-audio embed-generic embed-photo embed-post embed-video exit heading html info-outline insert insert-after insert-before remove saved shortcode table-col-after table-col-before table-col-delete table-row-after table-row-before table-row-delete editor-bold editor-italic editor-ul editor-ol editor-ol-rtl editor-quote editor-alignleft editor-aligncenter editor-alignright editor-insertmore editor-spellcheck editor-expand editor-contract editor-kitchensink editor-underline editor-justify editor-textcolor editor-paste-word editor-paste-text editor-removeformatting editor-video editor-customchar editor-outdent editor-indent editor-help editor-strikethrough editor-unlink editor-rtl editor-ltr editor-break editor-code editor-paragraph editor-table align-left align-right align-center align-none lock unlock calendar calendar-alt visibility hidden post-status edit trash sticky external arrow-up arrow-down arrow-right arrow-left arrow-up-alt arrow-down-alt arrow-right-alt arrow-left-alt arrow-up-alt2 arrow-down-alt2 arrow-right-alt2 arrow-left-alt2 sort leftright randomize list-view excerpt-view grid-view move share share-alt share-alt2 rss email email-alt email-alt2 networking amazon facebook facebook-alt google instagram linkedin pinterest podio reddit spotify twitch twitter twitter-alt whatsapp xing youtube hammer art migrate performance universal-access universal-access-alt tickets nametag clipboard heart megaphone schedule tide rest-api code-standards buddicons-activity buddicons-bbpress-logo buddicons-buddypress-logo buddicons-community buddicons-forums buddicons-friends buddicons-groups buddicons-pm buddicons-replies buddicons-topics buddicons-tracking wordpress wordpress-alt pressthis update update-alt screenoptions info cart feedback cloud translation tag category archive tagcloud text bell yes yes-alt no no-alt plus plus-alt plus-alt2 minus dismiss marker star-filled star-half star-empty flag warning location location-alt vault shield shield-alt sos search slides text-page analytics chart-pie chart-bar chart-line chart-area groups businessman businesswoman businessperson id id-alt products awards forms testimonial portfolio book book-alt download upload backup clock lightbulb microphone desktop laptop tablet smartphone phone index-card carrot building store album palmtree tickets-alt money money-alt smiley thumbs-up thumbs-down layout paperclip color-picker edit-large edit-page airplane bank beer calculator car coffee drumstick food fullscreen-alt fullscreen-exit-alt games hourglass open-folder pdf pets printer privacy superhero superhero-alt</description>
    <content><![CDATA[{
	"$schema": "https://schemas.wp.org/trunk/block.json",
	"apiVersion": 3,
	"name": "telex/block-zapper",
	"version": "0.2.0",
	"title": "Block Zapper",
	"category": "design",
	"icon": "database-remove",
	"description": "A container block that allows you to group other blocks and reset their custom properties with granular control.",
	"example": {
		"innerBlocks": [
			{
				"name": "core/heading",
				"attributes": {
					"content": "Sample Heading"
				}
			},
			{
				"name": "core/paragraph",
				"attributes": {
					"content": "This is sample content inside the Block Zapper container."
				}
			}
		]
	},
	"attributes": {
		"zapBlockSettings": {
			"type": "boolean",
			"default": true
		},
		"zapBlockStyles": {
			"type": "boolean",
			"default": true
		},
		"zapCustomProperties": {
			"type": "boolean",
			"default": true
		},
		"zapKeepMedia": {
			"type": "boolean",
			"default": true
		},
		"zapCustomClasses": {
			"type": "boolean",
			"default": true
		},
		"zapCustomAnchors": {
			"type": "boolean",
			"default": true
		},
		"zapHtmlElements": {
			"type": "boolean",
			"default": true
		}
	},
	"supports": {
		"html": false,
		"align": ["wide", "full"],
		"spacing": {
			"margin": true,
			"padding": true
		},
		"color": {
			"gradients": true,
			"background": true
		}
	},
	"textdomain": "block-zapper-block-wp",
	"editorScript": "file:./index.js",
	"editorStyle": "file:./index.css",
	"style": "file:./style-index.css",
	"viewScript": "file:./view.js",
	"render": "file:./render.php"
}]]></content>
  </file>
  <file path="src/index.js">
    <description>This file registers the block, specifies the edit and save functions, and loads the block's metadata</description>
    <content><![CDATA[
/**
 * Registers a new block provided a unique name and an object defining its behavior.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/
 */
import { registerBlockType } from '@wordpress/blocks';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * All files containing `style` keyword are bundled together. The code used
 * gets applied both to the front of your site and to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './style.scss';

/**
 * Internal dependencies
 */
import Edit from './edit';
import metadata from './block.json';

/**
 * Every block starts by registering a new block type definition.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/
 */
registerBlockType( metadata.name, {
	/**
	 * @see ./edit.js
	 */
	edit: Edit,
} );
	]]></content>
  </file>
  <file path="src/edit.js">
    <description>This file contains the edit function for the block which is responsible for rendering the block in the editor.</description>
    <content><![CDATA[/**
 * Retrieves the translation of text.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/
 */
import { __ } from '@wordpress/i18n';

/**
 * React hook that is used to mark the block wrapper element.
 * It provides all the necessary props like the class name.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops
 */
import { useBlockProps, InnerBlocks, InspectorControls } from '@wordpress/block-editor';

/**
 * WordPress dependencies
 */
import { PanelBody, Button, Notice, CheckboxControl, Card, CardBody, RadioControl } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { useState, useEffect } from '@wordpress/element';
import { createBlock } from '@wordpress/blocks';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * Those files can contain any CSS code that gets applied to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './editor.scss';

/**
 * The edit function describes the structure of your block in the context of the
 * editor. This represents what the editor will render when the block is used.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit
 *
 * @param {Object} props Block properties.
 * @return {Element} Element to render.
 */
export default function Edit( props ) {
	const { clientId, attributes, setAttributes } = props;
	const blockProps = useBlockProps();
	const [ isZapping, setIsZapping ] = useState( false );
	const [ zapMessage, setZapMessage ] = useState( '' );
	const [ lastZapTime, setLastZapTime ] = useState( null );

	// Zap mode state
	const [ zapMode, setZapMode ] = useState( 'selective' );

	// Zapping options state
	const [ zapOptions, setZapOptions ] = useState( {
		blockSettings: attributes.zapBlockSettings ?? true,
		blockStyles: attributes.zapBlockStyles ?? true,
		customProperties: attributes.zapCustomProperties ?? true,
		keepMedia: attributes.zapKeepMedia ?? true,
		customClasses: attributes.zapCustomClasses ?? true,
		customAnchors: attributes.zapCustomAnchors ?? true,
		htmlElements: attributes.zapHtmlElements ?? true
	} );

	const { updateBlockAttributes, replaceBlock } = useDispatch( 'core/block-editor' );

	// Get inner blocks with more detailed information
	const innerBlocks = useSelect( ( select ) => {
		try {
			const blocks = select( 'core/block-editor' ).getBlocks( clientId );
			return Array.isArray( blocks ) ? blocks : [];
		} catch ( error ) {
			console.error( 'Error getting inner blocks:', error );
			return [];
		}
	}, [ clientId ] );

	// Clear message after timeout
	useEffect( () => {
		if ( zapMessage ) {
			const timeout = setTimeout( () => {
				setZapMessage( '' );
			}, 10000 );
			return () => clearTimeout( timeout );
		}
	}, [ zapMessage ] );

	// Save zap options to block attributes
	useEffect( () => {
		setAttributes( {
			zapBlockSettings: zapOptions.blockSettings,
			zapBlockStyles: zapOptions.blockStyles,
			zapCustomProperties: zapOptions.customProperties,
			zapKeepMedia: zapOptions.keepMedia,
			zapCustomClasses: zapOptions.customClasses,
			zapCustomAnchors: zapOptions.customAnchors,
			zapHtmlElements: zapOptions.htmlElements
		} );
	}, [ zapOptions, setAttributes ] );

	/**
	 * Safely get attributes from block, handling undefined cases
	 */
	const getBlockAttributes = ( block ) => {
		if ( ! block || typeof block !== 'object' ) {
			return {};
		}
		return block.attributes || {};
	};

	/**
	 * Get categorized attributes based on zap options
	 * FINAL FIX: Completely rewritten Mega Zap logic for proper media preservation
	 */
	const getCategorizedAttributes = ( attributes, isMegaZap = false, keepMedia = true ) => {
		// Define attribute categories
		const categories = {
			essential: [
				// Core content that should ALWAYS be preserved
				'content', 'url', 'alt', 'caption', 'href', 'text', 'level', 'tagName', 'value',
				'label', 'placeholder', 'title', 'type', 'checked', 'selected', 'disabled',
				'required', 'multiple', 'name', 'id', 'headers', 'scope'
			],
			media: [
				// Media-related attributes - ABSOLUTE PRIORITY when keepMedia is true
				'src', 'poster', 'preload', 'autoplay', 'controls', 'loop', 'muted',
				'playsInline', 'crossOrigin', 'sizeSlug', 'blob', 'mediaId', 'mediaType',
				'focalPoint', 'hasParallax', 'isRepeated', 'minHeight', 'minHeightUnit',
				// Additional media attributes that might be categorized elsewhere
				'aspectRatio', 'width', 'height', 'scale'
			],
			blockSettings: [
				// Core block functionality
				'orientation', 'verticalAlignment', 'templateLock', 'allowedBlocks',
				'layout', 'templateInsertUpdatesSelection'
			],
			blockStyles: [
				// Visual styling (excluding media attributes)
				'backgroundColor', 'textColor', 'customBackgroundColor', 'customTextColor',
				'gradient', 'customGradient', 'overlayColor', 'customOverlayColor'
			],
			customProperties: [
				// Typography, spacing, borders, effects (excluding media dimensions)
				'fontSize', 'customFontSize', 'fontFamily', 'fontStyle', 'fontWeight',
				'letterSpacing', 'textDecoration', 'textTransform', 'lineHeight',
				'style', 'margin', 'padding', 'blockGap', 'borderColor', 'customBorderColor',
				'borderRadius', 'borderWidth', 'borderStyle', 'shadow', 'filter',
				'position', 'zIndex', 'top', 'right', 'bottom', 'left'
			],
			customClasses: [
				'className'
			],
			customAnchors: [
				'anchor'
			],
			htmlElements: [
				// HTML element selection and alignment
				'align', 'nodeName'
			]
		};

		// COMPLETELY REWRITTEN MEGA ZAP LOGIC
		if ( isMegaZap ) {
			console.log( 'MEGA ZAP MODE - Starting with keepMedia:', keepMedia );
			
			// In Mega Zap, start with empty sets
			const toKeep = new Set();
			const toRemove = new Set();

			// STEP 1: Always preserve essential attributes
			categories.essential.forEach( attr => {
				if ( attributes.hasOwnProperty( attr ) ) {
					toKeep.add( attr );
				}
			} );

			// STEP 2: Handle media preservation FIRST
			if ( keepMedia ) {
				categories.media.forEach( attr => {
					if ( attributes.hasOwnProperty( attr ) ) {
						toKeep.add( attr );
						console.log( `MEGA ZAP: Preserving media attribute: ${attr}` );
					}
				} );
			}

			// STEP 3: Everything else gets removed (unless already marked to keep)
			Object.keys( attributes ).forEach( attr => {
				if ( ! toKeep.has( attr ) ) {
					toRemove.add( attr );
					console.log( `MEGA ZAP: Will remove attribute: ${attr}` );
				}
			} );

			// Build final result for Mega Zap
			const cleanedAttributes = {};
			const removedAttributes = [];

			Object.keys( attributes ).forEach( attr => {
				if ( toKeep.has( attr ) ) {
					cleanedAttributes[ attr ] = attributes[ attr ];
				} else {
					removedAttributes.push( attr );
				}
			} );

			console.log( 'MEGA ZAP FINAL RESULT:', {
				keepMedia,
				originalCount: Object.keys( attributes ).length,
				keptCount: Object.keys( cleanedAttributes ).length,
				removedCount: removedAttributes.length,
				keptAttributes: Object.keys( cleanedAttributes ),
				removedAttributes,
				mediaAttributesFound: categories.media.filter( attr => attributes.hasOwnProperty( attr ) ),
				mediaAttributesKept: categories.media.filter( attr => cleanedAttributes.hasOwnProperty( attr ) ),
				mediaAttributesRemoved: categories.media.filter( attr => removedAttributes.includes( attr ) )
			} );

			return { cleanedAttributes, removedAttributes };
		}

		// SELECTIVE ZAP MODE (unchanged - this was working correctly)
		// STEP 1: Always preserve essential content
		const toKeep = new Set( categories.essential );

		// STEP 2: ABSOLUTE PRIORITY for media - this overrides everything else
		if ( keepMedia ) {
			categories.media.forEach( attr => toKeep.add( attr ) );
		}

		// STEP 3: Build the "to remove" set based on zap options
		const toRemove = new Set();

		// Selective zap: only add attributes from selected categories
		if ( zapOptions.blockSettings ) {
			categories.blockSettings.forEach( attr => {
				// Respect keepMedia even in selective mode
				if ( ! ( keepMedia && categories.media.includes( attr ) ) ) {
					toRemove.add( attr );
				}
			} );
		}
		if ( zapOptions.blockStyles ) {
			categories.blockStyles.forEach( attr => {
				if ( ! ( keepMedia && categories.media.includes( attr ) ) ) {
					toRemove.add( attr );
				}
			} );
		}
		if ( zapOptions.customProperties ) {
			categories.customProperties.forEach( attr => {
				if ( ! ( keepMedia && categories.media.includes( attr ) ) ) {
					toRemove.add( attr );
				}
			} );
		}
		if ( zapOptions.customClasses ) {
			categories.customClasses.forEach( attr => toRemove.add( attr ) );
		}
		if ( zapOptions.customAnchors ) {
			categories.customAnchors.forEach( attr => toRemove.add( attr ) );
		}
		if ( zapOptions.htmlElements ) {
			categories.htmlElements.forEach( attr => toRemove.add( attr ) );
		}

		// STEP 4: Build final result
		const cleanedAttributes = {};
		const removedAttributes = [];

		Object.keys( attributes ).forEach( key => {
			if ( toRemove.has( key ) && ! toKeep.has( key ) ) {
				removedAttributes.push( key );
			} else {
				cleanedAttributes[ key ] = attributes[ key ];
			}
		} );

		// Debug logging for selective mode
		console.log( 'SELECTIVE ZAP debug:', {
			isMegaZap,
			keepMedia,
			zapOptions,
			originalAttributeCount: Object.keys( attributes ).length,
			toKeepCount: toKeep.size,
			toRemoveCount: toRemove.size,
			cleanedAttributeCount: Object.keys( cleanedAttributes ).length,
			removedAttributeCount: removedAttributes.length,
			mediaAttributesKept: categories.media.filter( attr => attributes.hasOwnProperty( attr ) && ! toRemove.has( attr ) ),
			mediaAttributesRemoved: categories.media.filter( attr => attributes.hasOwnProperty( attr ) && toRemove.has( attr ) )
		} );

		return { cleanedAttributes, removedAttributes };
	};

	/**
	 * Create a clean version of a block based on zap mode and options
	 */
	const createCleanBlock = ( block, isMegaZap = false, keepMedia = true ) => {
		if ( ! block || ! block.name ) {
			console.warn( 'Invalid block passed to createCleanBlock:', block );
			return null;
		}

		const attributes = getBlockAttributes( block );
		const { cleanedAttributes, removedAttributes } = getCategorizedAttributes( attributes, isMegaZap, keepMedia );

		// Recursively clean inner blocks if they exist
		const cleanedInnerBlocks = [];
		if ( Array.isArray( block.innerBlocks ) ) {
			block.innerBlocks.forEach( innerBlock => {
				const cleanedInner = createCleanBlock( innerBlock, isMegaZap, keepMedia );
				if ( cleanedInner && cleanedInner.cleanBlock ) {
					cleanedInnerBlocks.push( cleanedInner.cleanBlock );
				}
			} );
		}

		// Create new block with cleaned attributes
		try {
			const newBlock = createBlock( block.name, cleanedAttributes, cleanedInnerBlocks );
			return {
				cleanBlock: newBlock,
				removedAttributes
			};
		} catch ( error ) {
			console.error( `Error creating clean block for ${block.name}:`, error );
			return null;
		}
	};

	/**
	 * Replace blocks with clean versions
	 * FIXED: Now properly passes keepMedia parameter to createCleanBlock
	 */
	const zapBlocks = ( blocks, isMegaZap = false, keepMedia = true ) => {
		if ( ! Array.isArray( blocks ) || blocks.length === 0 ) {
			return { totalZapped: 0, zapDetails: [], totalAttributesRemoved: 0 };
		}

		console.log( 'zapBlocks called with:', { isMegaZap, keepMedia, blockCount: blocks.length } );

		let totalZapped = 0;
		const zapDetails = [];
		let totalAttributesRemoved = 0;
		const replacements = [];

		blocks.forEach( ( block ) => {
			if ( ! block || ! block.clientId ) {
				console.warn( 'Invalid block in zapBlocks:', block );
				return;
			}

			const blockName = block.name ? block.name.replace('core/', '') : 'unknown';
			const attributes = getBlockAttributes( block );
			const beforeCount = Object.keys( attributes ).length;
			
			// Create a clean version of the block - CRITICAL: Pass keepMedia parameter!
			const result = createCleanBlock( block, isMegaZap, keepMedia );
			
			if ( ! result || ! result.cleanBlock ) {
				console.warn( `Could not create clean block for ${blockName}` );
				return;
			}

			const cleanBlock = result.cleanBlock;
			const removedAttrs = result.removedAttributes || [];
			const afterCount = Object.keys( cleanBlock.attributes || {} ).length;
			const removedCount = beforeCount - afterCount;

			if ( removedCount > 0 || removedAttrs.length > 0 ) {
				replacements.push({ 
					originalId: block.clientId, 
					newBlock: cleanBlock 
				});
				
				totalZapped++;
				totalAttributesRemoved += removedCount;
				
				zapDetails.push({
					name: blockName,
					before: beforeCount,
					after: afterCount,
					removed: removedCount,
					removedAttributes: removedAttrs
				});
			}
		} );

		// Perform all replacements
		replacements.forEach( ({ originalId, newBlock }) => {
			try {
				replaceBlock( originalId, newBlock );
			} catch ( error ) {
				console.error( 'Error replacing block:', error );
			}
		} );

		return { totalZapped, zapDetails, totalAttributesRemoved };
	};

	/**
	 * Handle the zap action based on selected mode
	 * FIXED: Now properly passes keepMedia to zapBlocks for both modes
	 */
	const handleZap = () => {
		setIsZapping( true );
		
		try {
			if ( ! Array.isArray( innerBlocks ) || innerBlocks.length === 0 ) {
				setZapMessage( __( '⚡ No blocks to zap! Add some blocks inside this container first.', 'block-zapper-block-wp' ) );
				return;
			}

			const isMegaZap = zapMode === 'mega';
			// CRITICAL FIX: Always use the current keepMedia setting from zapOptions
			const keepMedia = zapOptions.keepMedia;

			console.log( 'handleZap starting with:', { 
				zapMode, 
				isMegaZap, 
				keepMedia, 
				zapOptions 
			} );

			// For selective zap, check if any options are selected
			if ( ! isMegaZap ) {
				const hasAnyOption = Object.entries( zapOptions ).some( ([ key, value ]) => {
					// Skip keepMedia as it's not a destructive option
					if ( key === 'keepMedia' ) return false;
					return value === true;
				});
				
				if ( ! hasAnyOption ) {
					setZapMessage( __( '⚠️ Please select at least one zap option to continue!', 'block-zapper-block-wp' ) );
					return;
				}
			}

			// CRITICAL FIX: Pass keepMedia parameter to zapBlocks!
			const results = zapBlocks( innerBlocks, isMegaZap, keepMedia );
			setLastZapTime( new Date().toLocaleTimeString() );

			// Log detailed results to console for debugging
			console.log( 'Block Zapper Results (MEGA ZAP ULTIMATE FIX):', {
				mode: zapMode,
				isMegaZap,
				keepMediaUsed: keepMedia,
				options: zapOptions,
				totalBlocks: innerBlocks.length,
				blocksZapped: results.totalZapped,
				totalAttributesRemoved: results.totalAttributesRemoved,
				details: results.zapDetails
			} );

			if ( results.totalZapped > 0 ) {
				let message;
				
				if ( isMegaZap ) {
					message = `💥 MEGA ZAP COMPLETE! Nuked ${results.totalAttributesRemoved} properties from ${results.totalZapped} block(s). `;
					message += 'Only essential content preserved';
					if ( keepMedia ) message += ' + media';
					message += '! 🚀';
				} else {
					// Create detailed message showing what was removed
					const activeOptions = [];
					if ( zapOptions.blockSettings ) activeOptions.push('⚙️ settings');
					if ( zapOptions.blockStyles ) activeOptions.push('🎨 styles');
					if ( zapOptions.customProperties ) activeOptions.push('🔧 properties');
					if ( zapOptions.customClasses ) activeOptions.push('📝 classes');
					if ( zapOptions.customAnchors ) activeOptions.push('⚓ anchors');
					if ( zapOptions.htmlElements ) activeOptions.push('🏷️ elements');
					
					message = `⚡ SELECTIVE ZAP COMPLETE! Removed ${results.totalAttributesRemoved} properties from ${results.totalZapped} block(s). `;
					message += `Zapped: ${activeOptions.join(', ')}.`;
					if ( keepMedia ) message += ' 📸 Media preserved.';
				}
				
				setZapMessage( __( message, 'block-zapper-block-wp' ) );
			} else {
				const noChangeMessage = isMegaZap ? 
					'✨ No properties found to mega zap! Blocks are already clean.' :
					'✨ No matching properties found to zap with your current settings!';
				setZapMessage( __( noChangeMessage, 'block-zapper-block-wp' ) );
			}
		} catch ( error ) {
			console.error( 'Zap error:', error );
			setZapMessage( __( '❌ Zap failed! Check the console for details: ' + ( error.message || 'Unknown error' ), 'block-zapper-block-wp' ) );
		}

		setIsZapping( false );
	};

	/**
	 * Handle zap option changes
	 */
	const handleOptionChange = ( option, value ) => {
		setZapOptions( prev => ({ ...prev, [option]: value }) );
	};

	// Count current total properties for display
	const totalProps = Array.isArray( innerBlocks ) ? innerBlocks.reduce( ( total, block ) => {
		const attributes = getBlockAttributes( block );
		return total + Object.keys( attributes ).length;
	}, 0 ) : 0;

	const blockCount = Array.isArray( innerBlocks ) ? innerBlocks.length : 0;

	// Check if any destructive options are selected (only for selective mode)
	const hasDestructiveOptions = zapOptions.blockSettings || zapOptions.blockStyles || 
									zapOptions.customProperties || zapOptions.customClasses || 
									zapOptions.customAnchors || zapOptions.htmlElements;

	// Button properties based on mode
	const getZapButtonProps = () => {
		if ( zapMode === 'mega' ) {
			return {
				label: isZapping ? __( '💥 MEGA ZAPPING...', 'block-zapper-block-wp' ) : __( '💥 MEGA ZAP!', 'block-zapper-block-wp' ),
				color: '#dd0000',
				hoverColor: '#bb0000',
				activeColor: '#990000',
				disabled: isZapping || blockCount === 0
			};
		} else {
			return {
				label: isZapping ? __( '⚡ SELECTIVE ZAPPING...', 'block-zapper-block-wp' ) : __( '⚡ SELECTIVE ZAP!', 'block-zapper-block-wp' ),
				color: hasDestructiveOptions ? '#ff4444' : '#ccc',
				hoverColor: '#cc3333',
				activeColor: '#aa2222',
				disabled: isZapping || blockCount === 0 || !hasDestructiveOptions
			};
		}
	};

	const buttonProps = getZapButtonProps();

	return (
		<>
			<InspectorControls>
				<PanelBody 
					title={ __( '⚡ Block Zapper Controls', 'block-zapper-block-wp' ) }
					initialOpen={ true }
				>
					<Card>
						<CardBody>
							<div style={{ marginBottom: '16px', fontSize: '14px' }}>
								<strong>📦 Container Status:</strong>
								<br />
								🧱 { blockCount } block(s) inside
								<br />
								🔢 { totalProps } total properties
								{ lastZapTime && (
									<>
										<br />
										🕐 Last zap: { lastZapTime }
									</>
								) }
							</div>
						</CardBody>
					</Card>

					<div style={{ margin: '16px 0' }}>
						<RadioControl
							label={ __( '🎯 Zap Mode', 'block-zapper-block-wp' ) }
							help={ zapMode === 'mega' ? 
								__( 'Nuclear option: removes ALL styling, keeps only content + media (if selected)', 'block-zapper-block-wp' ) :
								__( 'Choose specific types of properties to remove with granular control', 'block-zapper-block-wp' )
							}
							selected={ zapMode }
							options={ [
								{ label: '⚡ Selective Zap (choose what to remove)', value: 'selective' },
								{ label: '💥 Mega Zap (nuclear option)', value: 'mega' }
							] }
							onChange={ setZapMode }
						/>
					</div>

					{ zapMode === 'selective' && (
						<>
							<div className="zapper-media-option" style={{ marginBottom: '16px', padding: '12px', backgroundColor: '#f8f9fa', border: '1px solid #e2e4e7', borderRadius: '4px' }}>
								<CheckboxControl
									label="📸 Keep images and videos (recommended)"
									checked={ zapOptions.keepMedia }
									onChange={ (value) => handleOptionChange('keepMedia', value) }
									help="Preserves media sources and related attributes"
								/>
							</div>

							<h4 style={{ margin: '16px 0 8px 0', fontSize: '14px', fontWeight: '600' }}>Choose What to Zap:</h4>
							
							<CheckboxControl
								label="⚙️ Block settings (layout, alignment, etc.)"
								checked={ zapOptions.blockSettings }
								onChange={ (value) => handleOptionChange('blockSettings', value) }
								help="Removes core block functionality settings"
							/>
							
							<CheckboxControl
								label="🎨 Block styles (colors, gradients, backgrounds)"
								checked={ zapOptions.blockStyles }
								onChange={ (value) => handleOptionChange('blockStyles', value) }
								help="Removes color and gradient styling"
							/>
							
							<CheckboxControl
								label="🔧 Custom properties (fonts, spacing, borders, effects)"
								checked={ zapOptions.customProperties }
								onChange={ (value) => handleOptionChange('customProperties', value) }
								help="Removes typography, margin, padding, borders, shadows"
							/>
							
							<CheckboxControl
								label="📝 Custom classes (Additional CSS class(es))"
								checked={ zapOptions.customClasses }
								onChange={ (value) => handleOptionChange('customClasses', value) }
								help="Removes custom CSS classes from Advanced panel"
							/>
							
							<CheckboxControl
								label="⚓ Custom anchors (HTML anchor)"
								checked={ zapOptions.customAnchors }
								onChange={ (value) => handleOptionChange('customAnchors', value) }
								help="Removes HTML anchor IDs from Advanced panel"
							/>
							
							<CheckboxControl
								label="🏷️ HTML element selections (alignment, tags)"
								checked={ zapOptions.htmlElements }
								onChange={ (value) => handleOptionChange('htmlElements', value) }
								help="Removes alignment and HTML element choices"
							/>
						</>
					) }

					{ zapMode === 'mega' && (
						<>
							<div style={{ padding: '16px', backgroundColor: '#fff3cd', border: '1px solid #ffeaa7', borderRadius: '4px', margin: '16px 0' }}>
								<h4 style={{ margin: '0 0 8px 0', fontSize: '14px', fontWeight: '600', color: '#856404' }}>💥 Mega Zap Mode</h4>
								<p style={{ margin: '0', fontSize: '13px', color: '#856404' }}>
									<strong>Warning:</strong> This will remove ALL styling properties and customizations from blocks, keeping only essential content.
								</p>
							</div>

							<div className="zapper-media-option zapper-mega-media-option" style={{ padding: '12px', backgroundColor: '#f8f9fa', border: '1px solid #e2e4e7', borderRadius: '4px', marginTop: '16px' }}>
								<CheckboxControl
									label="📸 Keep images and videos (recommended)"
									checked={ zapOptions.keepMedia }
									onChange={ (value) => handleOptionChange('keepMedia', value) }
									help="Preserves media sources and related attributes during mega zap"
								/>
							</div>
						</>
					) }

					<div style={{ marginTop: '16px', marginBottom: '8px' }}>
						<Button
							variant="secondary"
							onClick={ handleZap }
							isBusy={ isZapping }
							disabled={ buttonProps.disabled }
							style={ {
								backgroundColor: isZapping ? '#999' : buttonProps.color,
								color: '#fff',
								border: 'none',
								borderRadius: '4px',
								padding: '12px 24px',
								fontWeight: 'bold',
								textTransform: 'uppercase',
								fontSize: '16px',
								width: '100%'
							} }
						>
							{ buttonProps.label }
						</Button>
						{ zapMode === 'selective' && !hasDestructiveOptions && (
							<p style={{ fontSize: '12px', color: '#666', marginTop: '8px', textAlign: 'center' }}>
								Select at least one zap option to enable
							</p>
						) }
						{ zapMode === 'mega' && blockCount === 0 && (
							<p style={{ fontSize: '12px', color: '#666', marginTop: '8px', textAlign: 'center' }}>
								Add blocks to the container to enable mega zap
							</p>
						) }
					</div>
					
					{ zapMessage && (
						<Notice 
							status={ zapMessage.includes('COMPLETE') ? 'success' : zapMessage.includes('failed') ? 'error' : 'info' }
							isDismissible={ true }
							onRemove={ () => setZapMessage('') }
							style={ { marginTop: '12px', fontSize: '13px' } }
						>
							{ zapMessage }
						</Notice>
					) }
				</PanelBody>
			</InspectorControls>
			<div { ...blockProps }>
				<InnerBlocks
					tmplateLock={ false }
					renderAppender={ InnerBlocks.DefaultAppender }
				/>
			</div>
		</>
	);
}]]></content>
  </file>
  <file path="src/save.js">
    <description>This file contains the save function for the block which is responsible for creating the static result of rendering the block on the client to display the saved result on the front end.</description>
    <content><![CDATA[
	]]></content>
  </file>
  <file path="src/style.scss">
    <description>This file contains styles for the block in the front end.</description>
    <content><![CDATA[
/**
 * The following styles get applied both on the front of your site
 * and in the editor.
 *
 * Replace them with your own styles or remove the file completely.
 */

.wp-block-telex-block-zapper {
	margin: 1rem 0;
	
	/* Ensure the container doesn't interfere with inner block styling */
	& > * {
		margin-block-start: 0;
		margin-block-end: 1rem;
		
		&:last-child {
			margin-block-end: 0;
		}
	}
}
	]]></content>
  </file>
  <file path="src/editor.scss">
    <description>This file contains styles for the block in the editor.</description>
    <content><![CDATA[/**
 * The following styles get applied inside the editor only.
 *
 * Replace them with your own styles or remove the file completely.
 */

.wp-block-telex-block-zapper {
	min-height: 50px;
	border: 2px dashed #ccc;
	border-radius: 4px;
	position: relative;
	
	&.is-selected {
		border-color: #007cba;
	}
	
	/* Style for empty state */
	&:empty::before {
		content: attr(data-placeholder);
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		color: #999;
		font-style: italic;
	}
}

/* Inspector panel custom button styling */
.components-panel__body .components-button {
	&[style*="background-color: rgb(255, 68, 68)"] {
		&:hover {
			background-color: #cc3333 !important;
		}
		
		&:active {
			background-color: #aa2222 !important;
		}
	}
}

/* Fix checkbox alignment issues in zapper controls */
.zapper-media-option {
	.components-checkbox-control {
		/* Ensure proper alignment of checkbox */
		.components-checkbox-control__input-container {
			align-items: flex-start;
			padding-top: 2px;
		}
		
		/* Fix checkbox visual alignment */
		.components-checkbox-control__input {
			margin-top: 0;
			vertical-align: top;
		}
		
		/* Ensure text aligns properly with checkbox */
		label {
			display: flex;
			align-items: flex-start;
			gap: 8px;
		}
	}
}

/* Specific styling for mega zap mode media option */
.zapper-mega-media-option {
	.components-checkbox-control {
		/* Enhanced styling for better visibility in mega zap mode */
		.components-checkbox-control__label {
			font-weight: 500;
			color: #1e1e1e;
		}
		
		.components-checkbox-control__help {
			color: #757575;
			font-size: 12px;
			margin-top: 4px;
		}
	}
	
	/* Ensure proper spacing */
	margin-bottom: 0;
}

/* Global checkbox control improvements */
.components-panel__body .components-checkbox-control {
	/* Consistent spacing */
	margin-bottom: 16px;
	
	/* Better visual hierarchy */
	.components-checkbox-control__label {
		font-size: 14px;
		line-height: 1.4;
	}
	
	.components-checkbox-control__help {
		color: #757575;
		font-size: 12px;
		margin-top: 4px;
		line-height: 1.3;
	}
}]]></content>
  </file>
  <file path="src/view.js">
    <description>This file contains the view function for the block which is responsible for rendering interactive behaviors of the block on the front end. Ideally using the WordPress interactivity API.</description>
    <content><![CDATA[
/**
 * Use this file for JavaScript code that you want to run in the front-end
 * on posts/pages that contain this block.
 *
 * When this file is defined as the value of the `viewScript` property
 * in `block.json` it will be enqueued on the front end of the site.
 *
 * Example:
 *
 * ```js
 * {
 *   "viewScript": "file:./view.js"
 * }
 * ```
 *
 * If you're not making any changes to this file because your project doesn't need any
 * JavaScript running in the front-end, then you should delete this file and remove
 * the `viewScript` property from `block.json`.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/#view-script
 */
 
/* eslint-disable no-console */
console.log("Hello World! (from telex-block-zapper block)");
/* eslint-enable no-console */
	]]></content>
  </file>
  <file path="src/render.php">
    <description>This file contains the render callback function for the block, which is responsible for rendering the block content on the front end. A render function should exist only if the block is dynamic.</description>
    <content><![CDATA[<?php
/**
 * @see https://github.com/WordPress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#render
 */
?>
<div <?php echo get_block_wrapper_attributes(); ?>>
	<?php echo $content; ?>
</div>
]]></content>
  </file>
  <file path="package.json">
    <description>The AI assistant should only edit 'user_provided_block_name_slug', 'description' and resolve 'isDynamicVariant' in this file and ALWAYS INCLUDE IT. This file includes the necessary scripts for building, formatting, and linting the block code. Dependencies are managed at the workspace level via pnpm.</description>
    <content><![CDATA[{
	"name": "block-zapper",
	"version": "0.2.0",
	"description": "A container block that allows you to group other blocks and reset their custom properties with granular control.",
	"author": "WordPress Telex",
	"license": "GPL-2.0-or-later",
	"main": "build/index.js",
	"scripts": {
		"build": "wp-scripts build",
		"format": "wp-scripts format",
		"lint:css": "wp-scripts lint-style",
		"lint:js": "wp-scripts lint-js",
		"packages-update": "wp-scripts packages-update",
		"plugin-zip": "wp-scripts plugin-zip",
		"start": "wp-scripts start"
	}
}]]></content>
  </file>
</artefact>