<?xml version="1.0" encoding="UTF-8"?>
<artefact xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="artefact.xsd" name="Block Zapper" slug="block-zapper" type="code-package" schemaVersion="2">
  <file path="readme.txt">
    <description>This file contains the readme information for the block. It is used to provide information about the block, its usage, and any other relevant details.</description>
    <content><![CDATA[
=== Block Zapper ===

Contributors:      WordPress Telex
Tags:              block, container, group, cleanup
Tested up to:      6.8
Stable tag:        0.1.0
License:           GPLv2 or later
License URI:       https://www.gnu.org/licenses/gpl-2.0.html
A powerful container block that allows you to group other blocks and reset their custom properties with a single click.

== Description ==

Block Zapper is a container block similar to the WordPress Group block, but with a special superpower: the ability to remove all custom properties from child blocks contained within it.

This block is perfect for:

* Creating clean sections on your website
* Grouping related content blocks together
* Quickly resetting block customizations when you want to start fresh
* Managing complex layouts with multiple nested blocks

The "zap!" button in the block inspector allows you to instantly remove all custom styling, spacing, colors, and other modifications from any blocks placed inside the Block Zapper container.

== Key Features ==

* **Container Functionality**: Works like a standard group block - add any blocks inside
* **One-Click Reset**: Remove all custom properties from child blocks with the "zap!" button
* **Non-Destructive**: Only removes custom styling and properties, keeps the actual content intact
* **Flexible Layout**: Supports all standard WordPress blocks as children
* **Easy to Use**: Simple interface with clear labeling

== Installation ==

1. Upload the plugin files to the `/wp-content/plugins/block-zapper` directory, or install the plugin through the WordPress plugins screen directly.
2. Activate the plugin through the 'Plugins' screen in WordPress
3. The Block Zapper block will be available in the block inserter under the "Design" category

== Usage ==

1. Add a Block Zapper block to your post or page
2. Insert any blocks you want inside the Block Zapper container
3. Customize the child blocks as needed (colors, spacing, fonts, etc.)
4. When you want to reset all customizations, select the Block Zapper block
5. Click the "zap!" button in the block inspector sidebar
6. All custom properties will be removed from the child blocks instantly

== Frequently Asked Questions ==

= Does the "zap!" button delete my content? =

No! The zap button only removes custom styling and properties like colors, spacing, fonts, and other visual customizations. Your actual text content, images, and block structure remain completely intact.

= Can I undo the zap action? =

Yes, you can use the standard WordPress undo functionality (Ctrl+Z or Cmd+Z) to restore the custom properties if you zap them by mistake.

= What types of blocks can I put inside Block Zapper? =

You can insert any WordPress block inside the Block Zapper container - paragraphs, images, headings, columns, and even other container blocks.

= Will this affect blocks outside the Block Zapper? =

No, the zap action only affects blocks that are direct children of the Block Zapper container. Other blocks on your page remain untouched.

== Screenshots ==

1. Block Zapper in the block inserter
2. Container with child blocks and custom styling applied
3. The "zap!" button in the block inspector sidebar
4. Result after clicking zap - clean blocks with no custom properties

== Changelog ==

= 0.1.0 =
* Initial release
* Container functionality with inner blocks support
* "zap!" button to remove custom properties from child blocks
* Integration with WordPress block editor

== Support ==

For support and feature requests, please contact WordPress Telex.
]]></content>
  </file>
  <file path="block-zapper.php">
    <description>This file contains the block registration code in the form of a single block plugin. Any other plugin related functionality should be added to this file. All block rendering functionality should go to the `render.php` file.</description>
    <content><![CDATA[<?php
/**
 * Plugin Name:       Block Zapper
 * Description:       A container block that allows you to group other blocks and reset their custom properties with a single click.
 * Version:           0.1.0
 * Requires at least: 6.0
 * Requires PHP:      7.4
 * Author:            WordPress Telex
 * License:           GPLv2 or later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       block-zapper-block-wp
 *
 * @package BlockZapper
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

/**
 * Registers the block using the metadata loaded from the `block.json` file.
 * Behind the scenes, it registers also all assets so they can be enqueued
 * through the block editor in the corresponding context.
 *
 * @see https://developer.wordpress.org/reference/functions/register_block_type/
 */
function telex_block_zapper_block_init() {
	register_block_type( __DIR__ . '/build/' );
}
add_action( 'init', 'telex_block_zapper_block_init' );
]]></content>
  </file>
  <file path="src/block.json">
    <description>This file contains metadata about the block including its name, title, category, icon, and other properties. The icon is a WordPress Dashicon name (e.g., "admin-post", "format-aside", "admin-page"). Do not use any icon that's not in the list under any circustamce. These are the only slugs available:
	
	menu menu-alt menu-alt2 menu-alt3 admin-site admin-site-alt admin-site-alt2 admin-site-alt3 dashboard admin-post admin-media admin-links admin-page admin-comments admin-appearance admin-plugins plugins-checked admin-users admin-tools admin-settings admin-network admin-home admin-generic admin-collapse filter admin-customizer admin-multisite welcome-write-blog welcome-add-page welcome-view-site welcome-widgets-menus welcome-comments welcome-learn-more format-aside format-image format-gallery format-video format-status format-quote format-chat format-audio camera camera-alt images-alt images-alt2 video-alt video-alt2 video-alt3 media-archive media-audio media-code media-default media-document media-interactive media-spreadsheet media-text media-video playlist-audio playlist-video controls-play controls-pause controls-forward controls-skipforward controls-back controls-skipback controls-repeat controls-volumeon controls-volumeoff image-crop image-rotate image-rotate-left image-rotate-right image-flip-vertical image-flip-horizontal image-filter undo redo database-add database database-export database-import database-remove database-view align-full-width align-pull-left align-pull-right align-wide block-default button cloud-saved cloud-upload columns cover-image ellipsis embed-audio embed-generic embed-photo embed-post embed-video exit heading html info-outline insert insert-after insert-before remove saved shortcode table-col-after table-col-before table-col-delete table-row-after table-row-before table-row-delete editor-bold editor-italic editor-ul editor-ol editor-ol-rtl editor-quote editor-alignleft editor-aligncenter editor-alignright editor-insertmore editor-spellcheck editor-expand editor-contract editor-kitchensink editor-underline editor-justify editor-textcolor editor-paste-word editor-paste-text editor-removeformatting editor-video editor-customchar editor-outdent editor-indent editor-help editor-strikethrough editor-unlink editor-rtl editor-ltr editor-break editor-code editor-paragraph editor-table align-left align-right align-center align-none lock unlock calendar calendar-alt visibility hidden post-status edit trash sticky external arrow-up arrow-down arrow-right arrow-left arrow-up-alt arrow-down-alt arrow-right-alt arrow-left-alt arrow-up-alt2 arrow-down-alt2 arrow-right-alt2 arrow-left-alt2 sort leftright randomize list-view excerpt-view grid-view move share share-alt share-alt2 rss email email-alt email-alt2 networking amazon facebook facebook-alt google instagram linkedin pinterest podio reddit spotify twitch twitter twitter-alt whatsapp xing youtube hammer art migrate performance universal-access universal-access-alt tickets nametag clipboard heart megaphone schedule tide rest-api code-standards buddicons-activity buddicons-bbpress-logo buddicons-buddypress-logo buddicons-community buddicons-forums buddicons-friends buddicons-groups buddicons-pm buddicons-replies buddicons-topics buddicons-tracking wordpress wordpress-alt pressthis update update-alt screenoptions info cart feedback cloud translation tag category archive tagcloud text bell yes yes-alt no no-alt plus plus-alt plus-alt2 minus dismiss marker star-filled star-half star-empty flag warning location location-alt vault shield shield-alt sos search slides text-page analytics chart-pie chart-bar chart-line chart-area groups businessman businesswoman businessperson id id-alt products awards forms testimonial portfolio book book-alt download upload backup clock lightbulb microphone desktop laptop tablet smartphone phone index-card carrot building store album palmtree tickets-alt money money-alt smiley thumbs-up thumbs-down layout paperclip color-picker edit-large edit-page airplane bank beer calculator car coffee drumstick food fullscreen-alt fullscreen-exit-alt games hourglass open-folder pdf pets printer privacy superhero superhero-alt</description>
    <content><![CDATA[
  {
	"$schema": "https://schemas.wp.org/trunk/block.json",
	"apiVersion": 3,
	"name": "telex/block-zapper",
	"version": "0.1.0",
	"title": "Block Zapper",
	"category": "design",
	"icon": "database-remove",
	"description": "A container block that allows you to group other blocks and reset their custom properties with a single click.",
	"example": {
		"innerBlocks": [
			{
				"name": "core/heading",
				"attributes": {
					"content": "Sample Heading"
				}
			},
			{
				"name": "core/paragraph",
				"attributes": {
					"content": "This is sample content inside the Block Zapper container."
				}
			}
		]
	},
	"supports": {
		"html": false,
		"align": ["wide", "full"],
		"spacing": {
			"margin": true,
			"padding": true
		},
		"color": {
			"gradients": true,
			"background": true
		}
	},
	"textdomain": "block-zapper-block-wp",
	"editorScript": "file:./index.js",
	"editorStyle": "file:./index.css",
	"style": "file:./style-index.css",
	"viewScript": "file:./view.js",
	"render": "file:./render.php"
}
  ]]></content>
  </file>
  <file path="src/index.js">
    <description>This file registers the block, specifies the edit and save functions, and loads the block's metadata</description>
    <content><![CDATA[
/**
 * Registers a new block provided a unique name and an object defining its behavior.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/
 */
import { registerBlockType } from '@wordpress/blocks';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * All files containing `style` keyword are bundled together. The code used
 * gets applied both to the front of your site and to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './style.scss';

/**
 * Internal dependencies
 */
import Edit from './edit';
import metadata from './block.json';

/**
 * Every block starts by registering a new block type definition.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/
 */
registerBlockType( metadata.name, {
	/**
	 * @see ./edit.js
	 */
	edit: Edit,
} );
	]]></content>
  </file>
  <file path="src/edit.js">
    <description>This file contains the edit function for the block which is responsible for rendering the block in the editor.</description>
    <content><![CDATA[/**
 * Retrieves the translation of text.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/
 */
import { __ } from '@wordpress/i18n';

/**
 * React hook that is used to mark the block wrapper element.
 * It provides all the necessary props like the class name.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops
 */
import { useBlockProps, InnerBlocks, InspectorControls } from '@wordpress/block-editor';

/**
 * WordPress dependencies
 */
import { PanelBody, Button, Notice } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { useState, useEffect } from '@wordpress/element';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * Those files can contain any CSS code that gets applied to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './editor.scss';

/**
 * The edit function describes the structure of your block in the context of the
 * editor. This represents what the editor will render when the block is used.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit
 *
 * @param {Object} props Block properties.
 * @return {Element} Element to render.
 */
export default function Edit( props ) {
	const { clientId } = props;
	const blockProps = useBlockProps();
	const [ isZapping, setIsZapping ] = useState( false );
	const [ zapMessage, setZapMessage ] = useState( '' );
	const [ lastZapTime, setLastZapTime ] = useState( null );

	const { updateBlockAttributes, replaceBlock } = useDispatch( 'core/block-editor' );
	const { createBlock } = useDispatch( 'core/blocks' );

	// Get inner blocks with more detailed information
	const innerBlocks = useSelect( ( select ) => {
		return select( 'core/block-editor' ).getBlocks( clientId );
	}, [ clientId ] );

	// Clear message after timeout
	useEffect( () => {
		if ( zapMessage ) {
			const timeout = setTimeout( () => {
				setZapMessage( '' );
			}, 7000 );
			return () => clearTimeout( timeout );
		}
	}, [ zapMessage ] );

	/**
	 * Create a completely clean version of a block with only essential content
	 */
	const createCleanBlock = ( block ) => {
		const essentialAttributes = ['content', 'url', 'alt', 'caption', 'href', 'text', 'level', 'tagName', 'value', 'label', 'placeholder', 'id', 'title', 'src', 'type', 'checked', 'selected', 'disabled', 'required', 'multiple', 'name'];
		
		// Only keep essential content attributes
		const cleanedAttributes = {};
		essentialAttributes.forEach( key => {
			if ( block.attributes[ key ] !== undefined ) {
				cleanedAttributes[ key ] = block.attributes[ key ];
			}
		} );

		// Recursively clean inner blocks
		const cleanedInnerBlocks = block.innerBlocks ? 
			block.innerBlocks.map( innerBlock => createCleanBlock( innerBlock ) ) : 
			[];

		// Create new block with clean attributes
		const { createBlock } = wp.blocks;
		return createBlock( block.name, cleanedAttributes, cleanedInnerBlocks );
	};

	/**
	 * Replace blocks with completely clean versions
	 */
	const zapAllBlocks = ( blocks ) => {
		let totalZapped = 0;
		const zapDetails = [];

		blocks.forEach( ( block ) => {
			const blockName = block.name.replace('core/', '');
			const beforeProps = Object.keys( block.attributes ).length;
			
			// Create a completely clean version of the block
			const cleanBlock = createCleanBlock( block );
			const afterProps = Object.keys( cleanBlock.attributes ).length;
			const removedCount = beforeProps - afterProps;

			if ( removedCount > 0 ) {
				// Replace the block entirely with the clean version
				replaceBlock( block.clientId, cleanBlock );
				totalZapped++;
				
				zapDetails.push({
					name: blockName,
					before: beforeProps,
					after: afterProps,
					removed: removedCount
				});
			}
		} );

		return { totalZapped, zapDetails };
	};

	/**
	 * Handle the zap action with block replacement for immediate visual feedback
	 */
	const handleZap = () => {
		setIsZapping( true );
		
		try {
			if ( innerBlocks.length === 0 ) {
				setZapMessage( __( '⚡ No blocks to zap! Add some blocks inside this container first.', 'block-zapper-block-wp' ) );
			} else {
				const results = zapAllBlocks( innerBlocks );
				setLastZapTime( new Date().toLocaleTimeString() );

				// Log detailed results to console for debugging
				console.log( 'Block Zapper Results:', {
					totalBlocks: innerBlocks.length,
					blocksZapped: results.totalZapped,
					details: results.zapDetails
				} );

				if ( results.totalZapped > 0 ) {
					const totalPropsRemoved = results.zapDetails.reduce( (total, d) => total + d.removed, 0 );
					const detailText = results.zapDetails.map( d => 
						`${d.name}: ${d.removed} props removed`
					).join( ', ' );
					
					setZapMessage( 
						__( `⚡ ZAP COMPLETE! Removed ${totalPropsRemoved} properties from ${results.totalZapped} block(s). Details: ${detailText}`, 'block-zapper-block-wp' )
					);
				} else {
					setZapMessage( __( '✨ All blocks are already clean! No custom properties found to remove.', 'block-zapper-block-wp' ) );
				}
			}
		} catch ( error ) {
			console.error( 'Zap error:', error );
			setZapMessage( __( '❌ Zap failed! Check the console for details: ' + error.message, 'block-zapper-block-wp' ) );
		}

		setIsZapping( false );
	};

	// Count current total properties for display
	const totalProps = innerBlocks.reduce( ( total, block ) => {
		return total + Object.keys( block.attributes ).length;
	}, 0 );

	return (
		<>
			<InspectorControls>
				<PanelBody 
					title={ __( '⚡ Block Zapper Controls', 'block-zapper-block-wp' ) }
					initialOpen={ true }
				>
					<div style={{ marginBottom: '16px', padding: '12px', backgroundColor: '#f0f0f0', borderRadius: '4px' }}>
						<strong>Container Status:</strong>
						<br />
						📦 { innerBlocks.length } block(s) inside
						<br />
						🎨 { totalProps } total properties
						{ lastZapTime && (
							<>
								<br />
								🕐 Last zap: { lastZapTime }
							</>
						) }
					</div>
					<p style={{ fontSize: '14px', marginBottom: '12px' }}>
						{ __( 'This will completely replace all blocks inside with clean versions, removing ALL styling: colors, fonts, spacing, borders, alignments, and custom classes. Only content will be preserved!', 'block-zapper-block-wp' ) }
					</p>
					<Button
						variant="secondary"
						onClick={ handleZap }
						isBusy={ isZapping }
						disabled={ isZapping || innerBlocks.length === 0 }
						style={ {
							backgroundColor: isZapping ? '#999' : '#ff4444',
							color: '#fff',
							border: 'none',
							borderRadius: '4px',
							padding: '12px 24px',
							fontWeight: 'bold',
							textTransform: 'uppercase',
							fontSize: '16px',
							width: '100%'
						} }
					>
						{ isZapping ? __( '⚡ ZAPPING...', 'block-zapper-block-wp' ) : __( '⚡ ZAP!', 'block-zapper-block-wp' ) }
					</Button>
					{ zapMessage && (
						<Notice 
							status={ zapMessage.includes('COMPLETE') ? 'success' : zapMessage.includes('failed') ? 'error' : 'info' }
							isDismissible={ true }
							onRemove={ () => setZapMessage('') }
							style={ { marginTop: '12px', fontSize: '13px' } }
						>
							{ zapMessage }
						</Notice>
					) }
				</PanelBody>
			</InspectorControls>
			<div { ...blockProps }>
				<InnerBlocks
					templateeLock={ false }
					renderAppender={ InnerBlocks.DefaultAppender }
				/>
			</div>
		</>
	);
}]]></content>
  </file>
  <file path="src/save.js">
    <description>This file contains the save function for the block which is responsible for creating the static result of rendering the block on the client to display the saved result on the front end.</description>
    <content><![CDATA[
	]]></content>
  </file>
  <file path="src/style.scss">
    <description>This file contains styles for the block in the front end.</description>
    <content><![CDATA[
/**
 * The following styles get applied both on the front of your site
 * and in the editor.
 *
 * Replace them with your own styles or remove the file completely.
 */

.wp-block-telex-block-zapper {
	margin: 1rem 0;
	
	/* Ensure the container doesn't interfere with inner block styling */
	& > * {
		margin-block-start: 0;
		margin-block-end: 1rem;
		
		&:last-child {
			margin-block-end: 0;
		}
	}
}
	]]></content>
  </file>
  <file path="src/editor.scss">
    <description>This file contains styles for the block in the editor.</description>
    <content><![CDATA[
/**
 * The following styles get applied inside the editor only.
 *
 * Replace them with your own styles or remove the file completely.
 */

.wp-block-telex-block-zapper {
	min-height: 50px;
	border: 2px dashed #ccc;
	border-radius: 4px;
	position: relative;
	
	&.is-selected {
		border-color: #007cba;
	}
	
	/* Style for empty state */
	&:empty::before {
		content: attr(data-placeholder);
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		color: #999;
		font-style: italic;
	}
}

/* Inspector panel custom button styling */
.components-panel__body .components-button {
	&[style*="background-color: rgb(255, 68, 68)"] {
		&:hover {
			background-color: #cc3333 !important;
		}
		
		&:active {
			background-color: #aa2222 !important;
		}
	}
}
	]]></content>
  </file>
  <file path="src/view.js">
    <description>This file contains the view function for the block which is responsible for rendering interactive behaviors of the block on the front end. Ideally using the WordPress interactivity API.</description>
    <content><![CDATA[
/**
 * Use this file for JavaScript code that you want to run in the front-end
 * on posts/pages that contain this block.
 *
 * When this file is defined as the value of the `viewScript` property
 * in `block.json` it will be enqueued on the front end of the site.
 *
 * Example:
 *
 * ```js
 * {
 *   "viewScript": "file:./view.js"
 * }
 * ```
 *
 * If you're not making any changes to this file because your project doesn't need any
 * JavaScript running in the front-end, then you should delete this file and remove
 * the `viewScript` property from `block.json`.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-metadata/#view-script
 */
 
/* eslint-disable no-console */
console.log("Hello World! (from telex-block-zapper block)");
/* eslint-enable no-console */
	]]></content>
  </file>
  <file path="src/render.php">
    <description>This file contains the render callback function for the block, which is responsible for rendering the block content on the front end. A render function should exist only if the block is dynamic.</description>
    <content><![CDATA[<?php
/**
 * @see https://github.com/WordPress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#render
 */
?>
<div <?php echo get_block_wrapper_attributes(); ?>>
	<?php echo $content; ?>
</div>
]]></content>
  </file>
  <file path="package.json">
    <description>The AI assistant should only edit 'user_provided_block_name_slug', 'description' and resolve 'isDynamicVariant' in this file and ALWAYS INCLUDE IT. This file includes the necessary scripts for building, formatting, and linting the block code. Dependencies are managed at the workspace level via pnpm.</description>
    <content><![CDATA[
  {
	"name": "block-zapper",
	"version": "0.1.0",
	"description": "A container block that allows you to group other blocks and reset their custom properties with a single click.",
	"author": "WordPress Telex",
	"license": "GPL-2.0-or-later",
	"main": "build/index.js",
	"scripts": {
		"build": "wp-scripts build",
		"format": "wp-scripts format",
		"lint:css": "wp-scripts lint-style",
		"lint:js": "wp-scripts lint-js",
		"packages-update": "wp-scripts packages-update",
		"plugin-zip": "wp-scripts plugin-zip",
		"start": "wp-scripts start"
	}
}
]]></content>
  </file>
</artefact>